#!/usr/bin/env bash

FORCE=${FORCE:+(FORCED)}
_prefix=-1

function log()
{
    printf "%-${_prefix}s : " "$repo"
    printf "${@}"
}

if [ $# == 0 ] ; then
    echo "Getting projects from gerrit"
    projects=($(ssh review gerrit ls-projects | \
        grep -Ei '^(openstack|zuul|starlingx|airship)/'| sort -r ))
else
    echo "Setting projects from args"
    projects=($@)
fi

for repo in ${projects[@]} ; do
    [ ${#repo} -gt $_prefix ] && _prefix=${#repo}
done

set -e 
for repo in ${projects[@]} ; do
    (
    [ ! -e "./$repo" ] && continue
    cd "./$repo" >/dev/null 2>&1
    current_url=$(git remote get-url origin)

    if [ -z "$FORCE" -a "https://opendev.org/" == "${current_url::20}" ] ; then
        log "SKIP %s already\n" "$current_url"
        continue
    fi
    temp_url=$(echo $current_url | sed -e 's/^git:/https:/' -e 's/^http:/https:/')
    new_url=$(curl -sI $temp_url| awk -F': ' '/Location/ {print $2}')

    # In case we're running in an already fixed or fresh clone repo.
    if [ -z $new_url ] ; then
        log "Unable to map %s\n" "$current_url"
        if [ -z "$FORCE" ] ; then
            continue
        fi
        new_url=$current_url
    fi

    log "Upstream is now %s %s\n" "$new_url" "$FORCE"

    if ! git diff --exit-code >/dev/null ; then
        log "SKIP! Working dir is dirty\n"
        continue
    fi

    if [ "$(git rev-parse --symbolic --abbrev-ref HEAD)" != 'master' ] ; then
        log "SKIP! not on master\n"
        continue
    fi

    git remote set-url origin $new_url
    # Due to a gitea bug these refs aren't available
    sed -i~ 's|^\(.*refs/notes/review.*\)$|#\1|' .git/config

    git remote update
    git checkout master
    git merge --ff-only
    if git remote show gerrit >/dev/null 2>&1 ; then
        git remote remove gerrit
    fi
    if [ -e '.gitreview' ] ; then
        git review -s
    else
        log 'Missing .gitreview\n'
    fi
    for branch in $(git branch --no-color | awk '/^ *stable\// {print $1}') ; do
        series=$(basename $branch)
        if git rev-parse --symbolic --abbrev-ref "origin/stable/$series" >/dev/null 2>&1; then
            git branch -D $branch
            git checkout -t "origin/stable/$series"
            git checkout master
        else
            echo Skipping old branch $branch in $repo
        fi
    done
    )
done
